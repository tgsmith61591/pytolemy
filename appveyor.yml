# AppVeyor.com is a Continuous Integration service to build and run tests under Windows
# This .yml file is based on scikit-learn and statsmodels' Appveyor CI setups, adapted for
# use with pytolemy https://ci.appveyor.com/project/tgsmith61591/pytolemy

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\build_tools\\appveyor\\run_with_env.cmd"
  PYPI_USERNAME: tgsmith61591.gh
  PYPI_PASSWORD:
    secure: okvMa3VgIXdlnMC48iMefQ==

  matrix:
    - PY_MAJOR_VER: 3
      PY_MINOR_VER: 5
      PYTHON_ARCH: "x86"
      GDAL_ARCH: "win32"
      PYTHON_VERSION: "3.5"
      MINICONDA_MICRO_VERSION: "31"

    - PY_MAJOR_VER: 3
      PY_MINOR_VER: 5
      PYTHON_ARCH: "x86_64"
      GDAL_ARCH: "win_amd64"
      PYTHON_VERSION: "3.5"
      MINICONDA_MICRO_VERSION: "31"

# 3/27/18 - Conda is not working well on Windows because they haven't gotten
# their act together RE: powershell...
build_script:
  - ps: Start-FileDownload "https://repo.continuum.io/miniconda/Miniconda$env:PY_MAJOR_VER-4.3.$env:MINICONDA_MICRO_VERSION-Windows-$env:PYTHON_ARCH.exe" C:\Miniconda.exe; echo "Finished downloading miniconda"
  # - ps: Start-FileDownload "https://repo.continuum.io/miniconda/Miniconda$env:PY_MAJOR_VER-latest-Windows-$env:PYTHON_ARCH.exe" C:\Miniconda.exe; echo "Finished downloading miniconda"
  - cmd: C:\Miniconda.exe /S /D=C:\Py
  - SET PATH=C:\Py;C:\Py\Scripts;C:\Py\Library\bin;%PATH%
  - conda config --set always_yes yes
  # - conda update conda

  # Debugging because Appveyor gives us no stack traces when this stuff breaks.
  - ps: echo "Conda version:"
  - conda --version
  - ps: echo "Python version=$env:PYTHON_VERSION"

  # Install conda env
  - ps: conda create -n testenv --yes python=$env:PYTHON_VERSION numpy cython pip patsy
  - activate testenv

  # Things we'll need for deployment
  - pip install wheel twine pytest

  # Download GDAL
  - ps: |
      $GDAL_WHEEL = "GDAL-2.2.4-cp$env:PY_MAJOR_VER$env:PY_MINOR_VER-cp$env:PY_MAJOR_VER$env:PY_MINOR_VERm-$env:GDAL_ARCH.whl"
      Start-FileDownload "https://download.lfd.uci.edu/pythonlibs/h2ufg7oq/$GDAL_WHEEL" $GDAL_WHEEL; echo "Finished downloading GDAL wheel"
      python -m pip install $GDAL_WHEEL

  # Build the package
  - python setup.py develop

test_script:
  # Change to a non-source folder to make sure we run the tests on the
  # installed library.
  - "mkdir empty_folder"
  - "cd empty_folder"
  - pytest --showlocals --durations=20 --pyargs pytolemy

  # Move back to the project folder
  - "cd .."

after_test:
  # After the test, build the wheels (let travis handle the source build).
  - ECHO "Test complete, building wheels"
  - python setup.py sdist bdist_wheel
  - set PATH=%BK_PATH%

artifacts:
  - path: dist\*

deploy_script:
  - echo "Starting artifact deployment"
  - set PATH=%BK_PATH%
  - ps: If ($env:APPVEYOR_REPO_TAG -eq "true") { Invoke-Expression "twine upload -u tgsmith61591.gh -p $env:PYPI_PASSWORD --skip-existing dist/*" } Else { write-output "Not on a tagged commit, won't deploy to pypi"}
  #- ps: If ($env:APPVEYOR_REPO_BRANCH -eq "develop") { Invoke-Expression "twine upload -u tgsmith61591.gh -p $env:PYPI_PASSWORD --repository-url https://test.pypi.org/legacy/ --skip-existing dist/*" } Else { write-output "Not on a development commit, won't deploy to pypitest"}
